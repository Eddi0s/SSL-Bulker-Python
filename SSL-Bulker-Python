import os
import datetime
import socket
import pickle
from cryptography import x509
from urllib.request import ssl
import OpenSSL
from datetime import timezone
import dns.resolver  # Adding the DNS resolver library

# Define colors
RED = "\033[1;31m"
GREEN = "\033[1;32m"
ORANGE = "\033[38;5;208m"
RESET = "\033[0m"
WHITE = "\033[97m"

# Function to save certificate data to a temporary file
def save_certificate_data(domains, certificate_data):
    with open('temp_cert_data.pkl', 'wb') as file:
        pickle.dump({'domains': domains, 'certificate_data': certificate_data}, file)

# Function to load certificate data from a temporary file
def load_certificate_data():
    try:
        with open('temp_cert_data.pkl', 'rb') as file:
            data = pickle.load(file)
            return data['domains'], data['certificate_data']
    except FileNotFoundError:
        return None, None

# Function to get the first nameserver for a domain
def get_first_nameserver(domain):
    try:
        answers = dns.resolver.resolve(domain, 'NS')
        first_nameserver = str(answers[0])  # Only the first nameserver
        return first_nameserver
    except (dns.resolver.NoAnswer, IndexError):
        return None

# Function to get certificate expiry using alternative method
def get_num_days_before_expired(hostname: str, port: str = '443') -> int:
    context = ssl.SSLContext()
    with socket.create_connection((hostname, port)) as sock:
        with context.wrap_socket(sock, server_hostname=hostname) as ssock:
            certificate = ssock.getpeercert(True)
            cert = ssl.DER_cert_to_PEM_cert(certificate)
            x509_cert = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)
            cert_expires = datetime.datetime.strptime(
                x509_cert.get_notAfter().decode('utf-8'), '%Y%m%d%H%M%SZ'
            ).replace(tzinfo=timezone.utc)
            num_days = (cert_expires - datetime.datetime.now(timezone.utc)).days
            return num_days

# Function to get certificate expiry date
def get_certificate_expiry(domain):
    try:
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE

        with socket.create_connection((domain, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                data = ssock.getpeercert(True)
                pem_data = ssl.DER_cert_to_PEM_cert(data)
                cert_data = x509.load_pem_x509_certificate(pem_data)
                return cert_data.not_valid_after
    except ssl.CertificateError as e:
        return "Certificate expired or hostname mismatch"
    except Exception as e:
        return datetime.datetime.now() + datetime.timedelta(days=get_num_days_before_expired(domain))

# Function to determine color based on certificate validity
def determine_color(expiry_date):
    if isinstance(expiry_date, str):
        return RED
    today = datetime.datetime.now()
    delta = expiry_date - today
    if delta.days <= 0:
        return RED
    elif delta.days <= 28:
        return ORANGE
    else:
        return GREEN

# Function to update the status live
def update_status(domains_scanned, total_domains):
    os.system('clear' if os.name == 'posix' else 'cls')
    print(f"Scanning status: {domains_scanned}/{total_domains} domains scanned\n")

# Function to sort by server name
def sort_by_server_name(domains, certificate_data):
    sorted_domains = sorted(domains, key=lambda x: certificate_data['server_names'].get(x, ''))
    save_certificate_data(sorted_domains, certificate_data)
    os.system('clear' if os.name == 'posix' else 'cls')
    check_certificates(sorted_domains, domains, certificate_data)

# Function to check certificates and display domain information
def check_certificates(domains, original_domains=None, certificate_data=None):
    if certificate_data is None:
        certificate_data = {'ip_addresses': {}, 'server_names': {}, 'nameservers': {}}  # Updated dictionary to include nameservers

    if original_domains is None:
        original_domains = domains[:]

    max_domain_width = max(len(domain) for domain in domains)
    max_expiry_width = len("Exp Date")
    max_ipv4_width = len("255.255.255.255")
    max_server_name_width = 30
    max_nameserver_width = 30

    update_status(0, len(domains))  # Initial status update

    for index, domain in enumerate(domains, start=1):
        try:
            expiry_date = certificate_data.get(domain)
            if expiry_date is None:
                expiry_date = get_certificate_expiry(domain)
                certificate_data[domain] = expiry_date

            color_code = determine_color(expiry_date)

            update_status(index, len(domains))

            os.system('clear' if os.name == 'posix' else 'cls')
            print(f"Scanning status: {index}/{len(domains)} domains scanned\n")
            print(f"{'Domain'.ljust(max_domain_width)} {'IP Address'.ljust(max_ipv4_width)} {'Server Name'.ljust(max_server_name_width)} {'Nameserver'.ljust(max_nameserver_width)} {'Exp Date'.ljust(max_expiry_width + 2)}")
            print(f"{'-' * max_domain_width} {'-' * max_ipv4_width} {'-' * max_server_name_width} {'-' * max_nameserver_width} {'-' * (max_expiry_width + 2)}")

            for d in domains[:index]:
                expiry = certificate_data[d]
                color = determine_color(expiry)

                if isinstance(expiry, datetime.datetime):
                    formatted_date = expiry.strftime("%b %e %Y").replace('  ', ' ')
                    if color == RED:
                        formatted_date = formatted_date.split('-')[0]

                    ip_address = certificate_data['ip_addresses'].get(d)
                    if ip_address is None:
                        ip_address = socket.gethostbyname(d)
                        certificate_data['ip_addresses'][d] = ip_address

                    ip_address_display = ip_address.ljust(max_ipv4_width)

                    server_name = certificate_data['server_names'].get(d)
                    if server_name is None:
                        try:
                            server_name = socket.gethostbyaddr(ip_address)[0][:max_server_name_width]
                        except socket.herror:
                            server_name = 'Unknown'

                        certificate_data['server_names'][d] = server_name

                    server_name_display = server_name.ljust(max_server_name_width)

                    nameserver = certificate_data['nameservers'].get(d)
                    if nameserver is None:
                        nameserver = get_first_nameserver(d)
                        certificate_data['nameservers'][d] = nameserver

                    nameserver_display = nameserver if nameserver else 'N/A'
                    nameserver_display = nameserver_display.ljust(max_nameserver_width)

                    print(f"{d.ljust(max_domain_width)} {ip_address_display} {server_name_display} {nameserver_display} {color}{formatted_date.ljust(max_expiry_width + 2)}{RESET}")
                else:
                    print(f"{d.ljust(max_domain_width)} {''.ljust(max_ipv4_width)} {''.ljust(max_server_name_width)} {''.ljust(max_nameserver_width)} {color}{expiry}{RESET}")

        except Exception as e:
            print(f"{domain.ljust(max_domain_width)} {''.ljust(max_ipv4_width)} {''.ljust(max_server_name_width)} {''.ljust(max_nameserver_width)} {RED}Error: {str(e)}{RESET}")

    print(f"{'-' * max_domain_width} {'-' * max_ipv4_width} {'-' * max_server_name_width} {'-' * max_nameserver_width} {'-' * (max_expiry_width + 2)}")

    sort_choice = input("Make a choice:\n[1] Sort by Exp date\n[2] Sort by Original Order\n[3] Sort by IP Address\n[4] Sort by Server Name\n[5] Sort by Name Server\n[6] Exit script\nChoice: ")
    if sort_choice == '1':
        domains.sort(key=lambda x: certificate_data.get(x))
        save_certificate_data(domains, certificate_data)
        os.system('clear' if os.name == 'posix' else 'cls')
        check_certificates(domains, original_domains, certificate_data)
    elif sort_choice == '2':
        domains[:] = original_domains[:]
        check_certificates(domains, original_domains, certificate_data)
    elif sort_choice == '3':
        sorted_domains = sorted(domains, key=lambda x: certificate_data['ip_addresses'].get(x, ''))
        save_certificate_data(sorted_domains, certificate_data)
        os.system('clear' if os.name == 'posix' else 'cls')
        check_certificates(sorted_domains, original_domains, certificate_data)
    elif sort_choice == '4':
        sort_by_server_name(domains, certificate_data)
    elif sort_choice == '5':
        sorted_domains = sorted(domains, key=lambda x: certificate_data['nameservers'].get(x, ''))
        save_certificate_data(sorted_domains, certificate_data)
        os.system('clear' if os.name == 'posix' else 'cls')
        check_certificates(sorted_domains, original_domains, certificate_data)
    elif sort_choice == '6':
        print("Exiting the script.")
        try:
            os.remove('temp_cert_data.pkl')
        except FileNotFoundError:
            pass
        exit()
    else:
        print("Invalid input. Enter '1' to sort by expiration date, '2' to sort by original order, '3' to sort by IP address, '4' to sort by Server Name, '5' to sort by Name Server, or '6' to exit the script.")

# Load certificate data from a temporary file if available
stored_domains, stored_certificate_data = load_certificate_data()

# Read domains from host.list file and check certificates
with open('host.list', 'r') as file:
    domains = file.readlines()
    domains = [domain.strip() for domain in domains]

    if stored_domains == domains:
        update_status(0, len(domains))
        check_certificates(domains, domains, stored_certificate_data)
    else:
        check_certificates(domains)
